{"version":3,"sources":["components/Search.jsx","components/Card.jsx","components/Cards.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Search","props","onSearchChange","onSetChange","imgSets","friendsType","setOptions","Object","entries","map","id","name","key","value","charAt","toUpperCase","slice","className","onChange","type","placeholder","toLowerCase","getRoboHashImgUrl","email","username","imgSet","Card","robot","src","alt","Cards","robots","cards","Scroll","style","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","1","2","3","4","5","App","getTitle","includes","getFriendsType","getSearchMessage","searchResult","robotsCount","event","target","document","title","q","APP_BASE_TITLE","fetch","then","response","json","users","content","filteredRobots","filter","length","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b01e4693.chunk.js","sourcesContent":["import React from 'react'\n\nconst Search = props => {\n    const {onSearchChange, onSetChange, imgSets, friendsType} = props\n    const setOptions = Object.entries(imgSets).map(([id, name]) => {\n        return <option\n            key={id}\n            id={`set-${id}`}\n            value={id}\n        >{`${id}. ${name.charAt(0).toUpperCase() + name.slice(1)}`}</option>\n    })\n    return (\n        <form>\n            <select\n                className=\"db center mb2 ba b--green bg-lightest-blue\"\n                onChange={onSetChange} name=\"set\"\n            >\n                {setOptions}\n            </select>\n            <input\n                onChange={onSearchChange}\n                className=\"pa2 mb3 ba b--green bg-lightest-blue\"\n                type=\"text\"\n                name=\"q\"\n                id=\"q\"\n                placeholder={`Search ${friendsType.toLowerCase()}s`}\n            />\n        </form>\n    )\n}\n\nexport default Search","import React from 'react'\n\nconst getRoboHashImgUrl = (email, username, id, imgSet) => {\n    return `https://robohash.org/${email.slice(1)}${username}${id}.png?size=200x200&set=set${imgSet}`\n}\n\nconst Card = props => {\n    const {email, id, name, username} = props.robot\n    const imgSet = props.imgSet\n    return (\n        <article id={`robot-${id}`} className={`tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-2 card robot robot-${id}`}>\n            <img src={getRoboHashImgUrl(email, username, id, imgSet)} alt={`${name} (${username})`} className=\"\"/>\n            <h2>{name}</h2>\n            <p>{email.toLowerCase()}</p>\n        </article>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\n\n\nconst Cards = props => {\n    const {robots, imgSet} = props\n    const cards = robots.map(robot =>\n        <Card key={robot.id} robot={robot} imgSet={imgSet} />\n    )\n    return (\n        <article className=\"cards\">\n            {cards}\n        </article>\n    )\n}\n\nexport default Cards","import React from 'react'\n\nconst Scroll = props => (\n    <div style={{'overflowY': 'scroll', 'height': '336px'}}>\n        {props.children}\n    </div>\n)\n\nexport default Scroll","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false,\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    const {hasError} = this.state\n    if (hasError) {\n        return <h2 className=\"title--error\">Oops! Something went terribly wrong.</h2>\n    }\n    return this.props.children\n  }\n}\nexport default ErrorBoundry","import React, { Component } from 'react';\nimport Search from '../components/Search'\nimport Cards from '../components/Cards'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './app.css'\n\nconst APP_BASE_TITLE = 'React Friends | '\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users'\nconst imgSets = {\n    1: 'robots',\n    2: 'monsters',\n    3: 'robot heads',\n    4: 'cats',\n    5: 'humans'\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      q: '',\n      imgSet: 1,\n      friendsType: 'Robot',\n      title: APP_BASE_TITLE + 'RoboFriends',\n    }\n}\n\n    getRoboHashImgUrl = (email, username, id, imgSet) => {\n      return `https://robohash.org/${email.slice(1)}${username}${id}.png?size=200x200&set=set${imgSet}`\n    }\n\n    componentDidMount() {\n      const {friendsType} = this.state\n      document.title = APP_BASE_TITLE + this.getTitle(friendsType)\n      // Get users from REST API.\n      fetch(USERS_URL)\n          .then(response => response.json())\n          .then(users => this.setState({\n              robots: users,\n              friendsType: this.getFriendsType(friendsType),\n              title: this.getTitle(friendsType),\n          }))\n    }\n\n    getTitle = (friendsType) => {\n      return `${friendsType.toLowerCase().includes('obo')\n              ? 'Robo' : friendsType + ' '}Friends`\n    }\n\n    getFriendsType = value => {\n      let friendsType = 'Robot'\n      if (value === '2') {\n          friendsType = 'Monster'\n      } else if (value === '4') {\n          friendsType = 'Cat'\n      } else if (value === '5') {\n          friendsType = 'Human'\n      }\n      return friendsType\n    }\n\n    getSearchMessage = (searchResult, friendsType, robotsCount) => {\n      return `Found ${searchResult ? searchResult : 'no'}\n      ${searchResult !== 0 ? 'of ' + robotsCount : ''}\n      ${friendsType}s`\n    }\n\n    onSetChange = event => {\n      // Set state whenever the set select is changed.\n      const value = event.target.value\n      this.setState({imgSet: value, friendsType: this.getFriendsType(value)})\n      document.title = APP_BASE_TITLE + this.getTitle(this.getFriendsType(value))\n    }\n\n    onSearchChange = event => {\n      // Set state whenever the search input is changed.\n      this.setState({q: event.target.value})\n    }\n\n  render() {\n    const { robots, q, friendsType, imgSet } = this.state\n    // Query result.\n    const filteredRobots = robots.filter(robot => robot.name\n      .toLowerCase().includes(q.toLowerCase())\n    )\n    const robotsCount = robots.length\n    const searchResult = filteredRobots.length\n    let content;\n    if (robots.length) {\n      content = <>\n        <Search\n          onSearchChange={this.onSearchChange}\n          onSetChange={this.onSetChange}\n          friendsType={friendsType}\n          imgSets={imgSets}\n        />\n        <Scroll>\n          <ErrorBoundry>\n            <Cards robots={filteredRobots} imgSet={imgSet} />\n          </ErrorBoundry>\n        </Scroll>\n      </>\n    } else {\n      content = <h1>Loading...</h1>\n    }\n\n    return (\n      <section className=\"app tc\">\n        <h1 className={`title--${friendsType.toLowerCase()}s`}>{this.getTitle(friendsType)}</h1>\n        <h2>\n        {this.getSearchMessage(searchResult, friendsType, robotsCount)}\n        </h2>\n        {content}\n      </section>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons'\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}